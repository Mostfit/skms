Merb.logger.info("Compiling routes...")
Merb::Router.prepare do

  match(%r{^/polls/([a-z]+)$}).to(:controller => 'polls', :action => "[1]").name(:poll_action) #does 'my','closed', etc

  #resource function only generates RESTful urls.
  resources :polls do
    resources :poll_choices do
      resources :votes
    end
  end

  resources :groups
  resources :polls 
  resources :tweets
  resources :users

  resource :tweets do
    resources :comments
    resources :tags
  end

  resources :polls do
    resources :comments
    resources :tags
  end
  
  resources :groups do
    resources :tags
  end

  slice(:merb_auth_slice_password, :name_prefix => nil, :path_prefix => "") #this line is required for the logout functionality. will find something better

  #the follwing routes are not autogenerated. Added for extra functionality.
  match('/login').to(:controller => 'users', :action => 'login').name(:openid) #for google federated login
    
  match('/').to(:controller => 'tweets', :action =>'index') #to match the home page
  match('/search').to(:controller => 'search', :action => 'search').name(:search) #not yet fixed

  #generates url of the form /polls/1/publish, where 1 refers to the poll's id. :id will be available in the params hash
  match('/polls') do |polls|
    polls.match('/:id/publish').to(:controller => 'polls', :action => 'publish').name(:publish_poll)
    polls.match('/:id/vote').to(:controller => 'polls', :action => 'vote').name(:vote)
  end
  
  match('/group/memberships').to(:controller => 'groups', :action => 'membership').name(:memberships)
  match('/group/owned(/:id)').to(:controller => 'groups', :action => 'owned').name(:groups_owned)
  #generates url of the form /group/1/join/4, where 1 is the group's id and 4 is the user's id who has to join the group. :id and :user_id will be available in the params hash
  match('/group') do |group|
    group.match('/:id/join/:user_id').to(:controller => 'groups', :action => 'join').name(:join)
    group.match('/:id/leave/:user_id').to(:controller => 'groups', :action => 'leave').name(:leave)
    group.match('/:id/approve/:user_id').to(:controller => 'groups', :action => 'approve').name(:approve)
  end

  #generates url of the form /user/1/memberships/4, where 1 is the user's id and 4 is the group's id (optional) of which the user is a member. :id and :group_id will be available in the params hash
  match('/replies').to(:controller => 'tweets', :action => 'replies').name(:replies) #the @reply feature
  match('/pms(.:format)').to(:controller => 'tweets', :action => 'private_messages').name(:private_messages) #the @reply feature
  match('/tweets/:id/tag').to(:controller => 'tweets', :action => 'tag').name(:tag_tweet)
  match('/groups/:id/tag').to(:controller => 'groups', :action => 'tag').name(:tag_group)

  match('/:nick(.:format)').to(:controller => 'users', :action => 'profile').name(:profile)

end
